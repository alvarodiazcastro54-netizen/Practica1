{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOmlI8MZltXsWFMB+zs3x2w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alvarodiazcastro54-netizen/Practica1/blob/main/EJERCICIOS%20PRACTICOS%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# PRÁCTICA CALIFICADA 02\n"
      ],
      "metadata": {
        "id": "xaGJKFc6KybL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desarrollar el diagrama de barras, sectores, histograma, líneas, cajas, con su respectiva\n",
        "leyenda y ejes según se requiera:\n"
      ],
      "metadata": {
        "id": "hujXCzuaKzfn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Agrupa los siguientes datos en intervalos de amplitud 2:\n",
        "2, 3, 5, 1, 6, 7, 8, 0, 8, 9, 6, 4, 4, 3, 2, 6, 3, 3, 2, 1, 1, 5, 6, 7, 4, 3, 2, 5, 4, 6\n",
        "Construye una tabla de frecuencias completa y dibuja el histograma\n",
        "correspondiente.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Akc9QEFdKzrp"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7RHfxH3qGtQC"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "datos = [2, 3, 5, 1, 6, 7, 8, 0, 8, 9, 6, 4, 4, 3, 2, 6, 3, 3, 2, 1, 1, 5, 6, 7, 4, 3, 2, 5, 4, 6]\n",
        "\n",
        "min_val = min(datos)\n",
        "max_val = max(datos)\n",
        "bins = np.arange(min_val, max_val + 2, 2)  # ej: [0,2,4,6,8,10]\n",
        "\n",
        "frecuencias, intervalos = np.histogram(datos, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos)-1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "plt.hist(datos, bins=bins, edgecolor='black', alpha=0.7)\n",
        "plt.title('Histograma de datos')\n",
        "plt.xlabel('Intervalos')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', alpha=0.75)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. La edad (en años) de los primeros 30 visitantes a un parque de atracciones son\n",
        "las siguientes:\n",
        "12, 13, 15, 16, 14, 13, 12, 13, 15, 18, 19, 12, 13, 14, 12, 17, 18, 14, 15, 14, 13,\n",
        "12, 14, 12, 13, 14, 14, 14, 15, 15\n",
        "Dibuja un diagrama de barras para representar estos datos\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "4-3KAOOvKz1J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from collections import Counter\n",
        "\n",
        "edades = [12, 13, 15, 16, 14, 13, 12, 13, 15, 18, 19, 12, 13, 14, 12,\n",
        "          17, 18, 14, 15, 14, 13, 12, 14, 12, 13, 14, 14, 14, 15, 15]\n",
        "\n",
        "conteo_edades = Counter(edades)\n",
        "\n",
        "edades_ordenadas, frecuencias = zip(*sorted(conteo_edades.items()))\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "barras = plt.bar(edades_ordenadas, frecuencias, color='#6a5acd', edgecolor='black', alpha=0.9)\n",
        "\n",
        "plt.xlabel('Edad', fontsize=12)\n",
        "plt.ylabel('Frecuencia', fontsize=12)\n",
        "plt.title('Frecuencia de edades de los primeros 30 visitantes', fontsize=14)\n",
        "plt.xticks(edades_ordenadas)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "\n",
        "for barra in barras:\n",
        "    altura = barra.get_height()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "7IcPy2FyPv3x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. El número de talla de calzado de los alumnos de una clase es:\n",
        "38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52\n",
        "Crea un gráfico de barras para representar los datos anteriores\n",
        "\n"
      ],
      "metadata": {
        "id": "loqeKjGgKz35"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "tallas = [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]\n",
        "frecuencias = [1] * len(tallas)\n",
        "\n",
        "plt.figure(figsize=(12, 5))\n",
        "plt.bar(tallas, frecuencias, color='green', edgecolor='black')\n",
        "\n",
        "plt.xlabel('Talla de calzado', fontsize=12)\n",
        "plt.ylabel('Frecuencia', fontsize=12)\n",
        "plt.title('Frecuencia de tallas de calzado de los alumnos', fontsize=14)\n",
        "plt.xticks(tallas)\n",
        "plt.yticks(range(0, 2))\n",
        "\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "for i, f in enumerate(frecuencias):\n",
        "    plt.text(tallas[i], f + 0.05, str(f), ha='center', fontsize=10)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "smxvvf6CPwRh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. El número de móviles vendidos diariamente por un gran centro comercial,\n",
        "corresponde a los siguientes datos:\n",
        "18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n",
        "20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22\n",
        "Crea una tabla de frecuencias y dibuja el diagrama de barras correspondiente.\n",
        "\n"
      ],
      "metadata": {
        "id": "XTneNHL7Kz9Y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "ventas = [18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n",
        "          20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21,\n",
        "          22, 22, 22, 22]\n",
        "\n",
        "min_val = min(ventas)\n",
        "max_val = max(ventas)\n",
        "bins = np.arange(min_val, max_val + 2, 1)\n",
        "\n",
        "frecuencias, intervalos = np.histogram(ventas, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Número de móviles vendidos': intervalos[:-1],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=0.8, edgecolor='black', alpha=0.7)\n",
        "\n",
        "plt.xlabel('Número de móviles vendidos')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Diagrama de Barras de Móviles Vendidos Diariamente')\n",
        "\n",
        "plt.xticks(intervalos[:-1] + 0.4, intervalos[:-1])\n",
        "\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Uwnc6-aHPwn6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. El número de hermanos de los alumnos de una clase está reflejado en los\n",
        "siguientes datos:\n",
        "1, 2, 2, 3, 0, 1, 2, 1, 3, 0, 0, 2, 1, 1, 4, 3, 4, 2, 1, 4, 3, 2, 1, 0, 1, 0, 1, 1, 2, 1, 0, 3\n",
        "Construye una tabla con frecuencias absolutas y porcentajes. Crea un diagrama\n",
        "de sectores basándote en los porcentajes.\n",
        "\n"
      ],
      "metadata": {
        "id": "l2YCnWNeK0AQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "from collections import Counter\n",
        "\n",
        "hermanos = [1, 2, 2, 3, 0, 1, 2, 1, 3, 0, 0, 2, 1, 1, 4, 3, 4, 2, 1, 4, 3, 2, 1, 0, 1, 0, 1, 1, 2, 1, 0, 3]\n",
        "\n",
        "conteo = Counter(hermanos)\n",
        "\n",
        "valores, frecuencias = zip(*sorted(conteo.items()))\n",
        "\n",
        "total = sum(frecuencias)\n",
        "porcentajes = [f / total * 100 for f in frecuencias]\n",
        "\n",
        "print(\"Número de hermanos | Frecuencia | Porcentaje\")\n",
        "for v, f, p in zip(valores, frecuencias, porcentajes):\n",
        "    print(f\"{v:^18} | {f:^9} | {p:>9.2f}%\")\n",
        "\n",
        "plt.figure(figsize=(6, 8))\n",
        "colores = plt.cm.Paired(range(len(valores)))\n",
        "\n",
        "plt.pie(porcentajes, labels=valores, autopct='%1.1f%%', colors=colores, startangle=90)\n",
        "plt.title('Distribución del número de hermanos')\n",
        "plt.axis('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "B8Rnk_-RPxCB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        " Diagramas de sectores y análisis de datos"
      ],
      "metadata": {
        "id": "ceHESUGUK0DV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. La distribución del gasto en alimentación de una familia es la siguiente:\n",
        "o Carne: 26%\n",
        "o Pescado: 14%\n",
        "o Pastas y cereales: 14%\n",
        "o Patatas y hortalizas: 8%\n",
        "o Frutas: 9%\n",
        "o Otros: 29%\n",
        "Construye un diagrama circular para representar estos porcentajes\n",
        "\n"
      ],
      "metadata": {
        "id": "WkeO1ZPUK0GQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "gastos = [\"Carne\", \"Pescado\", \"Pastas y Cereales\", \"Patatas y Hortalizas\", \"Frutas\", \"Otros\"]\n",
        "porcentajes = [26, 14, 14, 8, 9, 29]\n",
        "\n",
        "colores = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0','#ffb3e6']\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=gastos, autopct='%1.1f%%', startangle=90, colors=colores, pctdistance=0.85)\n",
        "\n",
        "centre_circle = plt.Circle((0,0),0.70,fc='white')\n",
        "fig = plt.gcf()\n",
        "fig.gca().add_artist(centre_circle)\n",
        "\n",
        "plt.title('Distribución del Gasto de Alimentación')\n",
        "plt.axis('equal')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "Bb5JPvK0YxKs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Se ha realizado una encuesta a 600 chicos y chicas sobre su deporte preferido,\n",
        "obteniendo los siguientes porcentajes:\n",
        "o Fútbol: 40%\n",
        "o Atletismo: 18%\n",
        "o Baloncesto: 12%\n",
        "o Natación: 26%\n",
        "o Ciclismo: 4%\n",
        "Realiza un diagrama de barras para representar estos datos.\n",
        "\n"
      ],
      "metadata": {
        "id": "AEm8yueQK0JQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "deportes = [\"Fútbol\", \"Atletismo\", \"Baloncesto\", \"Natación\", \"Ciclismo\"]\n",
        "porcentajes = [40, 18, 12, 26, 4]\n",
        "\n",
        "colores = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.bar(deportes, porcentajes, color=colores)\n",
        "\n",
        "plt.xlabel('Deporte')\n",
        "plt.ylabel('Porcentaje')\n",
        "plt.title('Porcentaje de Deporte Preferido')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "ws21yKQHYxlk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. La tabla recoge la edad de un grupo de jóvenes encuestados:\n",
        "Edad (años): 15, 16, 17, 18, 19\n",
        "Frecuencia absoluta: 5, 8, 2, 20, 5\n",
        "a) Realiza un diagrama de barras. b) Dibuja el polígono de frecuencias.\n",
        "\n"
      ],
      "metadata": {
        "id": "N3c8IujpK0L_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "edades = [15, 16, 17, 18, 19]\n",
        "frecuencia_absoluta = [5, 8, 2, 20, 5]\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.bar(edades, frecuencia_absoluta, color='#6a5acd', edgecolor='black', alpha=0.9)\n",
        "\n",
        "plt.xlabel('Edad', fontsize=12)\n",
        "plt.ylabel('Frecuencia Absoluta', fontsize=12)\n",
        "plt.title('Diagrama de Barras de Frecuencia Absoluta de Edades', fontsize=14)\n",
        "plt.xticks(edades)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "\n",
        "for i, f in enumerate(frecuencia_absoluta):\n",
        "    plt.text(edades[i], f + 0.5, str(f), ha='center', fontsize=10)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "valores_cierre = [14] + edades + [20]\n",
        "frecuencias_cierre = [0] + frecuencia_absoluta + [0]\n",
        "\n",
        "plt.figure(figsize=(8, 5))\n",
        "plt.plot(valores_cierre, frecuencias_cierre, marker='o', linestyle='-', color='black')\n",
        "\n",
        "plt.xlabel('Edad', fontsize=12)\n",
        "plt.ylabel('Frecuencia Absoluta', fontsize=12)\n",
        "plt.title('Polígono de Frecuencias de Edades (con cierre)', fontsize=14)\n",
        "plt.xticks(edades)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "PAY8S9tqYx_0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. En el estudio estadístico realizado en un instituto se han obtenido los siguientes\n",
        "datos:\n",
        "o Peso (kg): [50, 55), [55, 60), [60, 65), [65, 70), [70, 75]\n",
        "o Número de alumnos: 10, 40, 25, 20, 5\n",
        "a) Organiza una tabla estadística. b) Construye el histograma y el\n",
        "polígono de frecuencias.\n",
        "\n"
      ],
      "metadata": {
        "id": "VwqRCMx3K0Og"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "intervalos = [\"[50, 55)\", \"[55, 60)\", \"[60, 65)\", \"[65, 70)\", \"[70, 75)\"]\n",
        "frecuencia = [10, 40, 25, 20, 5]\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    \"Intervalo\": intervalos,\n",
        "    \"Frecuencia Absoluta\": frecuencia\n",
        "})\n",
        "\n",
        "print(\"Tabla estadística:\")\n",
        "print(tabla)\n",
        "\n",
        "limites_inferiores = [50, 55, 60, 65, 70]\n",
        "limites_superiores = [55, 60, 65, 70, 75]\n",
        "bins = limites_inferiores + [limites_superiores[-1]]\n",
        "\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.bar(x=limites_inferiores, height=frecuencia, width=5, edgecolor='black', align='edge', color='#4caf50', alpha=0.8)\n",
        "plt.xlabel('Peso (kg)')\n",
        "plt.ylabel('Número de alumnos')\n",
        "plt.title('Histograma de Peso')\n",
        "plt.xticks(bins)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "centros = [(limites_inferiores[i] + limites_superiores[i]) / 2 for i in range(len(frecuencia))]\n",
        "x_poly = [limites_inferiores[0]] + centros + [limites_superiores[-1]]\n",
        "y_poly = [0] + frecuencia + [0]\n",
        "\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.plot(x_poly, y_poly, marker='o', linestyle='-', color='#f44336', linewidth=2)\n",
        "plt.xlabel('Peso (kg)')\n",
        "plt.ylabel('Número de alumnos')\n",
        "plt.title('Polígono de Frecuencias')\n",
        "plt.xticks(bins)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "E6Hd0q1DYylM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Se han registrado las edades de 50 estudiantes en una clase:\n",
        "12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n",
        "33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n",
        "54, 55, 56, 57, 58, 59, 60, 61\n",
        "a) Construye una tabla de frecuencias con intervalos de 5 años.\n",
        "b) Dibuja el histograma correspondiente.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Q5cPE9HUK0RI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "edades = list(range(12, 62))\n",
        "\n",
        "bins = list(range(10, 66, 5))\n",
        "\n",
        "frecuencias, intervalos = np.histogram(edades, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos)-1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=5, align='edge', color='#1f77b4', edgecolor='black', alpha=0.7)\n",
        "plt.xlabel('Edad (años)')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de Edades con Intervalos de 5 años')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "NAhZwLm3Yy6c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "11. En una encuesta sobre el número de libros leídos al mes por 30 personas, se\n",
        "obtuvieron los siguientes datos:\n",
        "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n",
        "25, 26, 27, 28, 29\n",
        "a) Organiza los datos en una tabla de frecuencias.\n",
        "b) Representa los datos mediante un diagrama de barras.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "NdkauB4WK0T5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "datos = list(range(30))\n",
        "\n",
        "bins = range(min(datos), max(datos) + 2)\n",
        "\n",
        "frecuencias, intervalos = np.histogram(datos, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos) - 1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=1, align='edge', color='skyblue', edgecolor='black', alpha=0.8)\n",
        "plt.xlabel('Número de libros leídos')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Diagrama de Barras del Número de Libros Leídos al Mes')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.6)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "qcUss5rIYzWM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Las temperaturas diarias (en grados Celsius) registradas durante una semana\n",
        "fueron:\n",
        "22, 24, 26, 28, 30, 32, 34\n",
        "a) Construye una tabla de frecuencias con intervalos de 2 grados.\n",
        "b) Dibuja el histograma correspondiente.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "U0R3sgfOOQwS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "temperaturas = [22, 24, 26, 28, 30, 32, 34]\n",
        "\n",
        "min_val = min(temperaturas)\n",
        "max_val = max(temperaturas)\n",
        "bins = np.arange(min_val, max_val + 2, 2)  # intervalos de 2 grados\n",
        "\n",
        "frecuencias, intervalos = np.histogram(temperaturas, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos)-1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(6,4))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=1.8, align='edge', color='#1f77b4', edgecolor='black', alpha=0.75)\n",
        "plt.xlabel('Temperatura (°C)')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de Temperaturas Diarias')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "XBkxrWp4Yzt0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. El número de horas de estudio semanales de 40 estudiantes es el siguiente:\n",
        "5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 105,\n",
        "110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185,\n",
        "190, 195, 200\n",
        "a) Organiza los datos en una tabla de frecuencias.\n",
        "b) Representa los datos mediante un histograma\n",
        "\n"
      ],
      "metadata": {
        "id": "qjigYnqvOdKJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "horas_estudio = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100,\n",
        "                 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180,\n",
        "                 185, 190, 195, 200]\n",
        "\n",
        "min_val = min(horas_estudio)\n",
        "max_val = max(horas_estudio)\n",
        "bins = np.arange(min_val, max_val + 10, 10)  # intervalos de 10 horas\n",
        "\n",
        "frecuencias, intervalos = np.histogram(horas_estudio, bins=bins)\n",
        "\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos)-1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=9, align='edge', color='black', edgecolor='black', alpha=0.75)\n",
        "plt.xlabel('Horas de estudio semanales')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de Horas de Estudio')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "ig_jL7WlY0N9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. En una encuesta sobre el número de hijos por familia en una comunidad, se\n",
        "obtuvieron los siguientes datos:\n",
        "0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
        "a) Construye una tabla de frecuencias con intervalos de 1 hijo.\n",
        "b) Dibuja el diagrama de barras correspondiente.\n",
        "\n"
      ],
      "metadata": {
        "id": "GsW2omp2OkGJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "edades = [12, 14, 15, 16, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 38, 40, 41, 43, 45]\n",
        "\n",
        "min_val = min(edades)\n",
        "max_val = max(edades)\n",
        "bins = np.arange(min_val, max_val + 5, 5)\n",
        "\n",
        "frecuencias, intervalos = np.histogram(edades, bins=bins)\n",
        "tabla = pd.DataFrame({\n",
        "    'Intervalo': [f'[{intervalos[i]}, {intervalos[i+1]})' for i in range(len(intervalos)-1)],\n",
        "    'Frecuencia': frecuencias\n",
        "})\n",
        "\n",
        "print(\"Tabla de frecuencias:\")\n",
        "print(tabla)\n",
        "plt.figure(figsize=(7,4))\n",
        "plt.bar(intervalos[:-1], frecuencias, width=4.5, align='edge', color='#2ca02c', edgecolor='black', alpha=0.75)\n",
        "plt.xlabel('Edad (años)')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Histograma de Edades')\n",
        "plt.xticks(intervalos)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "pG3ZtEZwY0mc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "15.   La distribución del tiempo libre semanal de un grupo de personas es la\n",
        "siguiente:\n",
        "o Deporte: 30%\n",
        "o Lectura: 20%\n",
        "o Cine: 15%\n",
        "o Viajes: 10%\n",
        "o Otras actividades: 25%\n",
        "a) Representa estos datos mediante un diagrama de sectores.\n",
        "b) Calcula el ángulo correspondiente a cada sector.\n"
      ],
      "metadata": {
        "id": "B5netiIvOsnh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "actividades = ['Deporte', 'Lectura', 'Cine', 'Viajes', 'Otras actividades']\n",
        "porcentajes = [30, 20, 15, 10, 25]\n",
        "\n",
        "angulos = [p * 360 / 100 for p in porcentajes]\n",
        "for actividad, ang in zip(actividades, angulos):\n",
        "    print(f'{actividad}: {ang:.1f}°')\n",
        "\n",
        "colores = ['#ff6f61', '#6b5b95', '#88b04b', '#f7cac9', '#92a8d1']\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=actividades, autopct='%1.1f%%', startangle=90, colors=colores, pctdistance=0.85)\n",
        "\n",
        "centro = plt.Circle((0,0),0.70,fc='white')\n",
        "fig = plt.gcf()\n",
        "fig.gca().add_artist(centro)\n",
        "\n",
        "plt.title('Distribución del Tiempo Libre Semanal')\n",
        "plt.axis('equal')\n",
        "\n",
        "plt.legend(actividades, title=\"Actividades\",\n",
        "           loc='lower left', bbox_to_anchor=(-0.1, 0),\n",
        "           borderaxespad=0.5, fontsize='small', title_fontsize='medium')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "g-yqMIQEY1Bs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. En una encuesta sobre los medios de transporte utilizados por los estudiantes\n",
        "para llegar a la escuela, se obtuvieron los siguientes datos:\n",
        "o Coche: 40%\n",
        "o Bicicleta: 25%\n",
        "o Caminando: 20%\n",
        "o Transporte público: 15%\n",
        "a) Representa estos datos mediante un diagrama de sectores.\n",
        "b) Calcula el ángulo correspondiente a cada sector.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "8KxQ5VtdO2uB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "medios_transporte = ['Coche', 'Bicicleta', 'Caminando', 'Transporte público']\n",
        "porcentajes = [40, 25, 20, 15]\n",
        "\n",
        "angulos = [p * 360 / 100 for p in porcentajes]\n",
        "for medio, ang in zip(medios_transporte, angulos):\n",
        "    print(f'{medio}: {ang:.1f}°')\n",
        "\n",
        "colores = ['#e63946', '#f1faee', '#a8dadc', '#457b9d']\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=medios_transporte, autopct='%1.1f%%', startangle=90, colors=colores, pctdistance=0.85)\n",
        "\n",
        "centro = plt.Circle((0,0),0.70,fc='white')\n",
        "fig = plt.gcf()\n",
        "fig.gca().add_artist(centro)\n",
        "\n",
        "plt.title('Distribución de Medios de Transporte')\n",
        "plt.axis('equal')\n",
        "\n",
        "plt.legend(medios_transporte, title=\"Medios de Transporte\",\n",
        "           loc='lower left', bbox_to_anchor=(-0.1, 0), borderaxespad=0.5)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "tcz1YOpPY1cE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. La distribución de los colores favoritos de un grupo de personas es la siguiente:\n",
        "o Rojo: 35%\n",
        "o Azul: 25%\n",
        "o Verde: 20%\n",
        "o Amarillo: 10%\n",
        "o Negro: 10%\n",
        "a) Representa estos datos mediante un diagrama de sectores.\n",
        "b) Calcula el ángulo correspondiente a cada sector.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "AHDIqx94O3Rg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "colores = ['Rojo', 'Azul', 'Verde', 'Amarillo', 'Negro']\n",
        "porcentajes = [35, 25, 20, 10, 10]\n",
        "\n",
        "angulos = [p * 360 / 100 for p in porcentajes]\n",
        "\n",
        "for color, ang in zip(colores, angulos):\n",
        "    print(f'{color}: {ang:.1f}°')\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=colores, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])\n",
        "plt.title('Distribución de Colores Favoritos')\n",
        "plt.axis('equal')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CcLT_4n3Y1yj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. En una encuesta sobre las frutas preferidas por un grupo de personas, se\n",
        "obtuvieron los siguientes datos:\n",
        "o Manzana: 50%\n",
        "o Banana: 30%\n",
        "o Naranja: 20%\n",
        "a) Representa estos datos mediante un diagrama de sectores.\n",
        "b) Calcula el ángulo correspondiente a cada sector\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "s-MtFxXYO3cZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "frutas = ['Manzana', 'Banana', 'Naranja']\n",
        "porcentajes = [50, 30, 20]\n",
        "\n",
        "angulos = [p * 360 / 100 for p in porcentajes]\n",
        "\n",
        "for fruta, ang in zip(frutas, angulos):\n",
        "    print(f'{fruta}: {ang:.1f}°')\n",
        "\n",
        "colores = ['#e63946', '#f4a261', '#2a9d8f']\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=frutas, autopct='%1.1f%%', startangle=90, colors=colores)\n",
        "plt.title('Frutas Preferidas')\n",
        "plt.axis('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "etOFBWHUY2FM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "19. La distribución del gasto mensual de una familia en diferentes categorías es la\n",
        "siguiente:\n",
        "o Alquiler: 40%\n",
        "o Alimentación: 30%\n",
        "o Transporte: 15%\n",
        "o Ocio: 10%\n",
        "o Otros: 5%\n",
        "a) Representa estos datos mediante un diagrama de sectores.\n",
        "b) Calcula el ángulo correspondiente a cada sector.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "vTdWqC9cO3fh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "categorias = ['Alquiler', 'Alimentación', 'Transporte', 'Ocio', 'Otros']\n",
        "porcentajes = [40, 30, 15, 10, 5]\n",
        "\n",
        "angulos = [p * 360 / 100 for p in porcentajes]\n",
        "\n",
        "for cat, ang in zip(categorias, angulos):\n",
        "    print(f'{cat}: {ang:.1f}°')\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.pie(porcentajes, labels=categorias, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])\n",
        "plt.title('Distribución del Gasto Mensual de la Familia')\n",
        "plt.axis('equal')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "YOwyyK7cY3d0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}